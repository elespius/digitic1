= javascript_include_tag 'analytics_head'

-# Experimental Amplitude support
= render :partial => "analytics/amplitude"

-# Kissmetrics is deprecated, use Google Tag Manager instead
= render :partial => "analytics/kissmetrics"
= render :partial => "analytics/google_analytics_script", locals: {google_analytics_key: @current_community.try(:google_analytics_key) }

-# Intercom for admin area
- if on_admin? && IntercomHelper.admin_intercom_respond_enabled?
  = render partial: "analytics/intercom", locals: { app_id: IntercomHelper.admin_intercom_app_id}

:javascript
  window.ST.analytics.data = {
    community_ident: "#{@current_commnunity.try(:ident)}",
    community_uuid:  "#{@current_community.try(:uuid_object).to_s}",
    community_id:    "#{@current_community.try(:id)}",

    user_id:      "#{@current_user.try(:id)}",
    user_uuid:    "#{@current_user.try(:uuid_object).to_s}",
    user_is_admin: #{@current_user.try(:is_marketplace_admin?).to_json},
    user_email:    #{@current_user && IntercomHelper.email(@current_user).to_json.html_safe || 'null'},
    user_name:     #{@current_user && @current_community && PersonViewUtils.person_display_name(@current_user, @current_community).to_json.html_safe || 'null'},
    user_hash:     #{@current_user && IntercomHelper.user_hash(@current_user.uuid_object.to_s) || 'null'},

    feature_flags: #{FeatureFlagHelper.feature_flags.to_json.html_safe},

    plan_status:       "#{@current_plan && @current_plan[:status] || 'null'}",
    plan_member_limit:  #{@current_plan && @current_plan[:member_limit] || 'null'},
    plan_created_at:    #{@current_plan && @current_plan[:created_at].to_time.to_i || 'null'},
    plan_updated_at:    #{@current_plan && @current_plan[:updated_at].to_time.to_i || 'null'},
    plan_expires_at:    #{@current_plan && @current_plan[:expires_at]&.to_time&.to_i.to_json},
    plan_features:      #{@current_plan && @current_plan[:features].select { |_, v| v }.keys.join(", ").to_json.html_safe || 'null' },

    identity_information: #{@current_user ? IntercomHelper.identity_information(@current_user).to_json.html_safe : 'null'}
  };
  window.ST.analytics.setup(window.ST.analytics.data);

  var _flash_analytics = #{flash[:_analytics_events].to_json.html_safe};
  if (_flash_analytics) {
    for(var i = 0; i < _flash_analytics.length; i++) {
      var _event = _flash_analytics[i];
      window.ST.analytics.logEvent( _event.event, _event.action, null, _event.props);
    }
  }

  var _flash_logout = #{flash[:_analytics_logout].to_json.html_safe};
  if (_flash_logout) {
    window.ST.analytics.logout();
  }
